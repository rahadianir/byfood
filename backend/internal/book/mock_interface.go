// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=book
//

// Package book is a generated GoMock package.
package book

import (
	model "byfood-app/internal/model"
	pagination "byfood-app/internal/pkg/pagination"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteBook mocks base method.
func (m *MockRepositoryInterface) DeleteBook(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteBook(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteBook), ctx, id)
}

// GetBookByID mocks base method.
func (m *MockRepositoryInterface) GetBookByID(ctx context.Context, id int64) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", ctx, id)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetBookByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetBookByID), ctx, id)
}

// GetBooks mocks base method.
func (m *MockRepositoryInterface) GetBooks(ctx context.Context, params model.BookSearchParams, page pagination.Page) ([]model.Book, pagination.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", ctx, params, page)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(pagination.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockRepositoryInterfaceMockRecorder) GetBooks(ctx, params, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockRepositoryInterface)(nil).GetBooks), ctx, params, page)
}

// StoreBook mocks base method.
func (m *MockRepositoryInterface) StoreBook(ctx context.Context, data model.Book) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBook", ctx, data)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreBook indicates an expected call of StoreBook.
func (mr *MockRepositoryInterfaceMockRecorder) StoreBook(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBook", reflect.TypeOf((*MockRepositoryInterface)(nil).StoreBook), ctx, data)
}

// UpdateBook mocks base method.
func (m *MockRepositoryInterface) UpdateBook(ctx context.Context, data model.Book) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, data)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateBook(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateBook), ctx, data)
}

// MockLogicInterface is a mock of LogicInterface interface.
type MockLogicInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLogicInterfaceMockRecorder
	isgomock struct{}
}

// MockLogicInterfaceMockRecorder is the mock recorder for MockLogicInterface.
type MockLogicInterfaceMockRecorder struct {
	mock *MockLogicInterface
}

// NewMockLogicInterface creates a new mock instance.
func NewMockLogicInterface(ctrl *gomock.Controller) *MockLogicInterface {
	mock := &MockLogicInterface{ctrl: ctrl}
	mock.recorder = &MockLogicInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicInterface) EXPECT() *MockLogicInterfaceMockRecorder {
	return m.recorder
}

// DeleteBook mocks base method.
func (m *MockLogicInterface) DeleteBook(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockLogicInterfaceMockRecorder) DeleteBook(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockLogicInterface)(nil).DeleteBook), ctx, id)
}

// GetBookByID mocks base method.
func (m *MockLogicInterface) GetBookByID(ctx context.Context, id int64) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", ctx, id)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockLogicInterfaceMockRecorder) GetBookByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockLogicInterface)(nil).GetBookByID), ctx, id)
}

// GetBooks mocks base method.
func (m *MockLogicInterface) GetBooks(ctx context.Context, params model.BookSearchParams, page pagination.Page) ([]model.Book, pagination.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", ctx, params, page)
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(pagination.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockLogicInterfaceMockRecorder) GetBooks(ctx, params, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockLogicInterface)(nil).GetBooks), ctx, params, page)
}

// StoreBook mocks base method.
func (m *MockLogicInterface) StoreBook(ctx context.Context, data model.Book) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBook", ctx, data)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreBook indicates an expected call of StoreBook.
func (mr *MockLogicInterfaceMockRecorder) StoreBook(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBook", reflect.TypeOf((*MockLogicInterface)(nil).StoreBook), ctx, data)
}

// UpdateBook mocks base method.
func (m *MockLogicInterface) UpdateBook(ctx context.Context, data model.Book) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, data)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockLogicInterfaceMockRecorder) UpdateBook(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockLogicInterface)(nil).UpdateBook), ctx, data)
}
